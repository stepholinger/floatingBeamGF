function dGdt = mcmc_GF(params)

% this function is for use with P. Segall's MCMC code- instead of actually
% calling the Green's function model, it pulls already created Green's
% functions (spatial derivative has already been taken). Therefore, L, f_max, and t_max are fixed, and already set by
% this point. In general, they will be L = 1e7, f_max = 1, t_max = 1000

% get parameters from vector
h_i = params(1);
h_w = params(2);
statDist = params(3);
t0 = params(4);

% set station distance limits (used during GF creation)
statDistLims = [1000,50000];

% load Green's functions and corresponding models 
G_mat = load("/home/setholinger/Documents/Code/MATLAB/workspaces/PIG/modeling/GF.mat");
G_mat = G_mat.G_mat;
model_mat = load("/home/setholinger/Documents/Code/MATLAB/workspaces/PIG/modeling/model.mat");
model_mat = model_mat.model_mat;

% find indices of desired ice and water thickness
for i = 1:size(model_mat,1)
    for j = 1:size(model_mat,2)
        h_i_vect(i) = model_mat{i,j}.h_i;
        h_w_vect(j) = model_mat{i,j}.h_w;
    end
end
h_i_ind = (h_i_vect == h_i);
h_w_ind = (h_w_vect == h_w);
    
% get correct model and Green's function for the desired parameters
GF = G_mat{h_i_ind,h_w_ind};
model = model_mat{h_i_ind,h_w_ind};

% check that this was done properly
if model.h_i == h_i &&  model.h_w == h_w
    fprintf("Model and Green's function loaded\n")
end
    

% get green's function at desired position
[~,minIdx] = min(abs(model.x - statDistLims(1)));
[~,maxIdx] = min(abs(model.x - statDistLims(2)));
[~,locIdx] = min(abs(model.x - statDist));
GF = GF(locIdx,:);

% make error function pulse
new_t = [-fliplr(model.t),model.t(2:end)];
erfStf = (erf(new_t/t0)+1)/2;
[~,offset_index] = max(find(erfStf < 1e-5));
erfOffset = -(max(new_t) + new_t(offset_index));
erfStf = (erf((new_t-erfOffset)/t0)+1)/2;
stf = errStf;

% convolve stf and green's function
G_scaled_pad = zeros(size(new_t));
G_scaled_pad(ceil(end/2):end) = G_scaled;
G_stf = ifft(fft(G_scaled_pad).*fft(stf));
    
% take time derivative to get velocity seismogram
dGdt = gradient(G_stf,model.dt);
